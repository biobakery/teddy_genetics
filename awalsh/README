##########
# README #
##########

Code by Aaron Walsh for TEDDY2.

Contact walsha@broadinstitute.org with questions.

################
# Dependencies #
################

PLINK 1.9
KING
R
BEDTools
GNU Parallel

########################################
# Code for genetic analysis with PLINK #
########################################

The script PLINK.sh is a wrapper to run genetic analysis with PLINK; its usage is:

PLINK.sh [-h] <help> [-i] <raw_data> [-s] <subjects_to_include> [-p] <prefix> [-m] <minor_allele_freq> [-e] <hardy_weinberg_equilibrium> [-g] <pihat>

The wrapper will output the following:
- visualisations of QC metrics
- results of PCA (i.e. eigenvalues, eigenvectors, loadings, and plots)
- genetics table
- annotations + coordinates of SNPs
- haplotypes

###########################
# Code for running models #
###########################

NOTE: I intend to write a wrapper for these steps

-------------------------------
 split samples into age groups 
-------------------------------

subset_samples_by_age.R

Usage:
   subset_samples_by_age.R [--sam <subject_metadata> --minI <min_age_1> --maxI <max_age_1> --minT <min_age_2> --maxT <max_age_2> --micro <microbiome>]

Options:
   --sam sample metadata
   --minI minimum age in days for infant subset
   --maxI maximum age in days for infant subset
   --minT minimum age in days for toddler subset
   --maxT maximum age in days for toddler subset
   --micro microbiome data

--------------------------------------------------------------
 filter microbiome features based on abundance and prevalence 
--------------------------------------------------------------

filter_ab_prev.R

Usage:
   filter_ab_prev.R [-i <input> -f <type> -a <abundance> -p <prevalence> -t <trans> -o <output>]

Options:
   -i input from MetaPhlAn2/HUMAnN2 (features as rows, samples as columns)
   -f type of feature (EC, Pfam, Species)
   -a abundance [default: 0]
   -p prevalence [default: 0.1]
   -t transformation (abs, log, log10, sqrt) [default: log]
   -o output

---------------------------
 subset the genetics table 
---------------------------

subset.sh

Usage:
    subset.sh [-h] <help> [-i] <input> [-p] <prefix> [-n] <size_chunks> [-t] <threads>
        -h display help
        -i input file (.tsv) to be split
        -p prefix for output files
        -n size of chunks
        -t threads

---------------------------------------
 generate shell scripts for each chunk 
---------------------------------------

slurm.py

usage: slurm.py [-h] [-i INPUT] [-o OUTPUT] [-c CPUS] [-m OPTIMISER] [-t TIME]

optional arguments:
  -h, --help    show this help message and exit
  -i INPUT      model input
  -o OUTPUT     model output
  -c CPUS       number of cpus
  -m OPTIMISER  optimiser for lmer
  -t TIME       runtime on cluster

---------------------------------------------------------
 merge microbiome feature + genetics features + metadata 
---------------------------------------------------------

format_input.R

Usage:
   format_input.R [-m <microbiome> -g <genetics> -d <metadata> -o <output>]

Options:
   -m microbiome features
   -g genetic features
   -d metadata
   -o output

------------
 run models 
------------

run_models.R

Usage:
   run_models.R [-i <input> -c <cores> -o <output>]

Options:
   -i input
   -c number of cpus [default: 1]
   -o model output
   
--------------------
 plot results - PCs 
--------------------

plot_results_pcs.R

Usage:
   plot_results_pcs.R [-s <stats> -d <data> -o <out_dir> -p <padj_method>]

Options:
   -s stats (output from run_models.R)
   -d data
   -o output directory for plots [default: out_dir]
   -p method for p-value adjustment [default: bonferroni] 

---------------------
 plot results - SNPs 
---------------------

plot_results_snps.R

Usage:
   plot_results_snps.R [-i <input> -o <output>]

Options:
   -i model stats
   -p p-value adjustment method
   -m microbiome features
   -g genetic features
   -d metadata
   -o output prefix

#
